---
name: Reusable container image build
on:
  workflow_call:
    inputs:
      image_flavor:
        type: string

env:
  IMAGE_DESC: "kourOS Customized Bluefin Image"
  IMAGE_KEYWORDS: "bootc,ublue,universal-blue,bluefin"
  IMAGE_LOGO_URL: "https://avatars.githubusercontent.com/u/120078124?s=200&v=4"  # Put your own image here for a fancy profile on https://artifacthub.io/!
  IMAGE_NAME: "${{ github.event.repository.name }}"  # Output image name, usually same as repo name
  IMAGE_REGISTRY: "ghcr.io/${{ github.repository_owner }}"  # Do not edit
  DEFAULT_TAG: "${{ inputs.image_flavor || 'latest' }}"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}-${{ inputs.image_flavor }}
  cancel-in-progress: true

jobs:
  build_push:
    name: Build and push ${{ inputs.image_flavor || 'latest' }} image
    runs-on: ubuntu-24.04

    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Prepare environment
        run: |
          # Lowercase the image uri
          echo "IMAGE_REGISTRY=${IMAGE_REGISTRY,,}" >> ${GITHUB_ENV}
          echo "IMAGE_NAME=${IMAGE_NAME,,}" >> ${GITHUB_ENV}

      # These stage versions are pinned by https://github.com/renovatebot/renovate
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Install skopeo and jq
        if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        run: |
          if ! { command -v jq && command -v skopeo; } >/dev/null 2>&1; then
            sudo apt-get update
            sudo apt-get install -y skopeo jq
          fi

      - name: Get current repo and base image commit
        if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        id: current_state
        run: |
          echo "git_commit=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

          base_image=$(grep -E '^FROM ghcr\.io' ./Containerfile | head -n1 | awk '{print $2}')
          echo "Base image: $base_image"

          ostree_commit=$(skopeo inspect "docker://$base_image" | jq -r '.Labels["org.centos.stream.ostree.commit"] // .Labels["ostree.commit"]')
          echo "ostree_commit=$ostree_commit" >> $GITHUB_OUTPUT

          # Build and push only when base commit changed
          echo '{"base_commit": "$ostree_commit"}' > .curr-base-commit.json

          if [ -z "$ostree_commit" ]; then
            echo "‚ùå Failed to extract OSTree commit from base image: $base_image"
            exit 1
          fi

      - name: Restore last build state
        if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        id: cache_restore
        uses: actions/cache@v4
        with:
          path: .last-build-info.json
          key: build-state-${{ hashFiles('.curr-base-commit.json') }}

      - name: Compare with last build state
        if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        id: changes_check
        run: |
          if [ ! -f .last-build-info.json ]; then
            exit 0
          fi

          # Git and ostree commits should be the same
          LAST_GIT=$(jq -r .git_commit < .last-build-info.json)
          LAST_BASE=$(jq -r .base_commit < .last-build-info.json)

          echo "Last Git:  $LAST_GIT"
          echo "Current:   ${{ steps.current_state.outputs.git_commit }}"
          echo "Last Base: $LAST_BASE"
          echo "Current:   ${{ steps.current_state.outputs.ostree_commit }}"

      - name: Check if skipping build and/or publish
        id: should_build_publish
        run: |
          # Determine if we're on the default branch (and not a pull request).
          default_branch=false
          if [ "${{ github.event_name }}" != "pull_request" ] && \
             [ "${{ github.ref }}" = "refs/heads/${{ github.event.repository.default_branch }}" ]; then
            default_branch=true
          fi

          # Decide whether to build.

          # Always build when triggered manually.
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            should_build=true
            echo "üì¶ Manual trigger detected ‚Äì building."
          # Always build for pull requests or non-default branches.
          elif [ "$default_branch" != "true" ]; then
            should_build=true
            echo "üì¶ Building for PR or non-default branch."
          # On the default branch, build only if the base image has changed.
          elif [ -f .last-build-info.json ]; then
            should_build=false
            echo "‚úÖ No base image changes detected ‚Äì skipping build."
          else
            should_build=true
            echo "üì¶ Base image changed ‚Äì building."
          fi

          echo "should_build=$should_build" >> "$GITHUB_OUTPUT"

          # Decide whether to publish.

          # Skip publish if we‚Äôre not building.
          if [ "$should_build" != "true" ]; then
            should_publish=false
            echo "üôÖ‚Äç‚ôÇÔ∏è Skipping publish ‚Äì nothing will be built."
          # Publish only if building from the default branch.
          elif [ "$default_branch" = "true" ]; then
            should_publish=true
            echo "üì§ Publishing ‚Äì build from default branch."
          else
            should_publish=false
            echo "üôÖ‚Äç‚ôÇÔ∏è Skipping publish ‚Äì not on default branch."
          fi

          echo "should_publish=$should_publish" >> "$GITHUB_OUTPUT"

      # This is optional, but if you see that your builds are way too big for the runners, you can enable this by uncommenting the following lines:
      - name: Maximize build space
        if: steps.should_build_publish.outputs.should_build == 'true'
        uses: ublue-os/remove-unwanted-software@cc0becac701cf642c8f0a6613bbdaf5dc36b259e # v9
        with:
          remove-codeql: true

      - name: Mount BTRFS for podman storage
        if: steps.should_build_publish.outputs.should_build == 'true'
        uses: ublue-os/container-storage-action@main

      - name: Get current date
        if: steps.should_build_publish.outputs.should_build == 'true'
        id: date
        run: |
          # This generates a timestamp like what is defined on the ArtifactHub documentation
          # E.G: 2022-02-08T15:38:15Z'
          # https://artifacthub.io/docs/topics/repositories/container-images/
          # https://linux.die.net/man/1/date
          echo "date=$(date -u +%Y\-%m\-%d\T%H\:%M\:%S\Z)" >> $GITHUB_OUTPUT

      # Image metadata for https://artifacthub.io/ - This is optional but is highly recommended so we all can get a index of all the custom images
      # The metadata by itself is not going to do anything, you choose if you want your image to be on ArtifactHub or not.
      - name: Image Metadata
        if: steps.should_build_publish.outputs.should_build == 'true'
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5
        id: metadata
        with:
          # This generates all the tags for your image, you can add custom tags here too!
          # Default tags are "$DEFAULT_TAG" and "$DEFAULT_TAG.$date".
          tags: |
            type=raw,value=${{ env.DEFAULT_TAG }}
            type=raw,value=${{ env.DEFAULT_TAG }}.{{date 'YYYYMMDD'}}
            type=sha,enable=${{ github.event_name == 'pull_request' }}
            type=ref,event=pr
          labels: |
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}/refs/heads/main/README.md
            org.opencontainers.image.created=${{ steps.date.outputs.date }}
            org.opencontainers.image.description=${{ env.IMAGE_DESC }}
            org.opencontainers.image.documentation=https://raw.githubusercontent.com/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}/refs/heads/main/README.md
            org.opencontainers.image.source=https://github.com/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}/blob/main/Containerfile
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}
            org.opencontainers.image.url=https://github.com/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.version=${{ env.DEFAULT_TAG }}.{{date 'YYYYMMDD'}}
            io.artifacthub.package.deprecated=false
            io.artifacthub.package.keywords=${{ env.IMAGE_KEYWORDS }}
            io.artifacthub.package.license=Apache-2.0
            io.artifacthub.package.logo-url=${{ env.IMAGE_LOGO_URL }}
            io.artifacthub.package.prerelease=false
            containers.bootc=1
          sep-tags: " "
          sep-annotations: " "

      - name: Build Image
        if: steps.should_build_publish.outputs.should_build == 'true'
        id: build_image
        uses: redhat-actions/buildah-build@7a95fa7ee0f02d552a32753e7414641a04307056 # v2
        with:
          containerfiles: |
            ./Containerfile
          # Postfix image name with -custom to make it a little more descriptive
          # Syntax: https://docs.github.com/en/actions/learn-github-actions/expressions#format
          image: ${{ env.IMAGE_NAME }}
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          build-args: |
            TAG=${{ env.DEFAULT_TAG }}
          oci: false

      # Rechunk is a script that we use on Universal Blue to make sure there isnt a single huge layer when your image gets published.
      # This does not make your image faster to download, just provides better resumability and fixes a few errors.
      # Documentation for Rechunk is provided on their github repository at https://github.com/hhd-dev/rechunk
      # You can enable it by uncommenting the following lines:
      # - name: Run Rechunker
      #   id: rechunk
      #   uses: hhd-dev/rechunk@f153348d8100c1f504dec435460a0d7baf11a9d2 # v1.1.1
      #   with:
      #     rechunk: 'ghcr.io/hhd-dev/rechunk:v1.0.1'
      #     ref: "localhost/${{ env.IMAGE_NAME }}:${{ env.DEFAULT_TAG }}"
      #     prev-ref: "${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.DEFAULT_TAG }}"
      #     skip_compression: true
      #     version: ${{ env.CENTOS_VERSION }}
      #     labels: ${{ steps.metadata.outputs.labels }} # Rechunk strips out all the labels during build, this needs to be reapplied here with newline separator

      # This is necessary so that the podman socket can find the rechunked image on its storage
      # - name: Load in podman and tag
      #   run: |
      #     IMAGE=$(podman pull ${{ steps.rechunk.outputs.ref }})
      #     sudo rm -rf ${{ steps.rechunk.outputs.output }}
      #     for tag in ${{ steps.metadata.outputs.tags }}; do
      #       podman tag $IMAGE ${{ env.IMAGE_NAME }}:$tag
      #     done

      # These `if` statements are so that pull requests for your custom images do not make it publish any packages under your name without you knowing
      # They also check if the runner is on the default branch so that things like the merge queue (if you enable it), are going to work
      - name: Login to GitHub Container Registry
        if: steps.should_build_publish.outputs.should_publish == 'true'
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push To GHCR
        if: steps.should_build_publish.outputs.should_publish == 'true'
        uses: redhat-actions/push-to-registry@5ed88d269cf581ea9ef6dd6806d01562096bee9c # v2
        id: push
        env:
          REGISTRY_USER: ${{ github.actor }}
          REGISTRY_PASSWORD: ${{ github.token }}
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          image: ${{ env.IMAGE_NAME }}
          tags: ${{ steps.metadata.outputs.tags }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}

      # This section is optional and only needs to be enabled if you plan on distributing
      # your project for others to consume. You will need to create a public and private key
      # using Cosign and save the private key as a repository secret in Github for this workflow
      # to consume. For more details, review the image signing section of the README.
      - name: Install Cosign
        if: steps.push.outcome == 'success'
        uses: sigstore/cosign-installer@d58896d6a1865668819e1d91763c7751a165e159 # v3.9.2

      - name: Sign container image
        if: steps.push.outcome == 'success'
        run: |
          IMAGE_FULL="${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}"
          for tag in ${{ steps.metadata.outputs.tags }}; do
            cosign sign -y --key env://COSIGN_PRIVATE_KEY $IMAGE_FULL:$tag
          done
        env:
          TAGS: ${{ steps.push.outputs.digest }}
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}

      - name: Save build input file
        if: steps.push.outcome == 'success'
        run: |
          echo '{"git_commit": "${{ steps.current_state.outputs.git_commit }}", "base_commit": "${{ steps.current_state.outputs.ostree_commit }}"}' > .last-build-info.json
